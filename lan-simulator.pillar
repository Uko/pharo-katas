! Designing a simple network simulation platform

- design from scratch
- nodes, links
- time simulation with ticks

The goal of this document is to show how we would develop from scratch in Pharo.
The program we are going to develop is a simple representation of a computer network.
At first, we will just simulate the different steps of packet delivery, but eventually, our program could be refined to become an experiment platform to explore and understand distributed algorithms.

!! Basic definitions and a starting point

We need to establish the basic model; what does the description above tell us?
A network is a number of interconnected nodes, which exchange data packets.
We will therefore probably need to model the nodes, the connection links, and the packets:

- Nodes have addresses, can send and receive packets;
- Links connect two nodes together, and transmit packets between them;
- Packets transport a payload and have the address of the node to which it should be delivered; if we want nodes to be able to answer, packets should also have the address of the node which originally sent it.

Let's start exploring by sketching some simple tests; this requires defining a test class:

[[[language=smalltalk
TestCase subclass: #KANetworkTest
    instanceVariableNames: ''
    classVariableNames: ''
    category: 'Kata-NetworkSimulator-Tests'
]]]


!!! Packets are simple value objects

Packets are the simplest objects in our model: we need to create them, and ask them about the data they contain, but that's about it.
Once created, a packet will not change its data, and the packet itself has no knowledge of the network, and no behavior that we can really talk about.

[[[language=smalltalk
KANetworkTest >> testPacketCreation
	| src dest payload packet |
	src := Object new.
	dest := Object new.
	payload := Object new.

	packet := KANetworkPacket from: src to: dest payload: payload.

	self assert: packet sourceAddress equals: src.
	self assert: packet destinationAddress equals: dest.
	self assert: packet payload equals: payload
]]]

In this unit test, we wrote how we think packets should be created, using a ==from:to:payload:== constructor message, and how it should be accessed, using three messages ==sourceAddress==, ==destinationAddress==, and ==payload==.
Since we have not yet decided what addresses and payloads should look like, we just pass arbitrary objects as parameters; all that matters is that when we ask the packet, it returns the correct object back.

Of course, if we now try to compile and run this test method, it will fail, because the class ==KANetworkPacket== has not been created yet, nor any of the four above messages; let's do that:

[[[language=smalltalk
KANetworkPacket >> Object subclass: #KANetworkPacket
	instanceVariableNames: 'sourceAddress destinationAddress payload'
	classVariableNames: ''
	category: 'Kata-NetworkSimulator-Core'
]]]

The class-side constructor method creates an instance then sends it an initialization message:

[[[language=smalltalk
KANetworkPacket class >> from: sourceAddress to: destinationAddress payload: anObject
	^ self new
		initializeSource: sourceAddress
		destination: destinationAddress
		payload: anObject
]]]

The initialization method is only supposed to be called when creating packets.

[[[language=smalltalk
KANetworkPacket >> initializeSource: source destination: destination payload: anObject
	sourceAddress := source.
	destinationAddress := destination.
	payload := anObject
]]]

Once a packet is created, all we need to do with it is to obtain its payload, or the addresses of its source or destination nodes.
We thus define an accessor method for each instance variable.

[[[language=smalltalk
KANetworkPacket >> sourceAddress
	^ sourceAddress
]]]

[[[language=smalltalk
KANetworkPacket >> destinationAddress
	^ destinationAddress
]]]

[[[language=smalltalk
KANetworkPacket >> payload
	^ payload
]]]

That's enough for our admittedly simplistic model of packets; we completely ignore the layers of the OSI model, but it could be an interesting exercise to model that more precisely.


!!! Nodes

The first obvious thing we can say about a network node is that if we want to be able to send packets to it, then it should have an address; let's translate that into a test:

[[[language=smalltalk
KANetworkTest >> testNodeCreation
	| address node |
	address := Object new.
	node := KANetworkNode withAddress: address.

	self assert: node address equals: address
]]]

Like before, before running this test, we have to define the ==KANetworkNode== class:

[[[language=smalltalk
Object subclass: #KANetworkNode
    instanceVariableNames: 'address'
    classVariableNames: ''
    category: 'Kata-NetworkSimulator-Core'
]]]

Then a class-side constructor method taking the address of the new node as parameter:

[[[language=smalltalk
KANetworkNode class >> withAddress: aNetworkAddress
	^ self new
		initializeAddress: aNetworkAddress;
		yourself
]]]

The constructor relies on an instance-side initialization method:

[[[language=smalltalk
KANetworkNode >> initializeAddress: aNetworkAddress
	address := aNetworkAddress
]]]

And we can ask a node for its address:

[[[language=smalltalk
KANetworkNode >> address
    ^ address
]]]


!!! Links are one-way connections between nodes

After nodes, we should look at links.
In the real world, a network cable is usually bidirectional, but here we're going to keep it simple and define links as simple one-way connections.
To make a two-way connection, we will just make two links, one in each direction.

Therefore, a link has a source and a destination node; additionally, to be able to send packets, nodes need to know about their outgoing links.

[[[language=smalltalk
KANetworkTest >> testNodeLinking
	| node1 node2 link |
	node1 := KANetworkNode withAddress: #address1.
	node2 := KANetworkNode withAddress: #address2.
	link := KANetworkLink from: node1 to: node2.

	link attach.

	self assert: (node1 hasLinkTo: node2)
]]]

This test creates two nodes and a link; after telling the link to ''attach'' itself,  we check that it did so: the source node should confirm that it has an outgoing link to the destination node.
Note that the constructor could have registered the link with ==node1==, but we opted for a separate message ==attach== instead, because it's bad form to have a constructor change other objets; this way we can build links between arbitrary nodes and still have control of when the connection really becomes part of the network model.

Again, we need to define class of links:

[[[language=smalltalk
Object subclass: #KANetworkLink
	instanceVariableNames: 'source destination'
	classVariableNames: ''
	category: 'Kata-NetworkSimulator-Core'
]]]

A constructor that passes the two required parameters to an instance-side initialization message:

[[[language=smalltalk
KANetworkLink class >> from: sourceNode to: destinationNode
	^ self new
		initializeFrom: sourceNode to: destinationNode
]]]

The initialization method itself:

[[[language=smalltalk
KANetworkLink >> initializeFrom: sourceNode to: destinationNode
	source := sourceNode.
	destination := destinationNode.
]]]

Accessors:

[[[language=smalltalk
KANetworkLink >> source
	^ source
]]]

[[[language=smalltalk
KANetworkLink >> destination
    ^ destination
]]]

The ==attach== method of a link delegates to the source node (the link knows which node has to do something, and the node knows what to do precisely):

[[[language=smalltalk
KANetworkLink >> attach
	source attach: self
]]]

If each node knows about all its outgoing links, it means it has a collection of those; we therefore need to extend ==KANetworkNode==, first with an additional instance variable ==outgoingLinks==:

[[[language=smalltalk
Object subclass: #KANetworkNode
	instanceVariableNames: 'address outgoingLinks'
	classVariableNames: ''
	category: 'Kata-NetworkSimulator-Core'
]]]

This variable needs to be initialized properly:

[[[language=smalltalk
KANetworkNode >> initialize
	outgoingLinks := Set new.
]]]

We can then implement the ==attach:== method:

[[[language=smalltalk
KANetworkNode >> attach: anOutgoingLink
	outgoingLinks add: anOutgoingLink
]]]

And finally the testing method on instances of ==KANetworkNode==:

[[[language=smalltalk
KANetworkNode >> hasLinkTo: aNetworkNode
	^ outgoingLinks
		anySatisfy: [ :any | any destination == aNetworkNode ]
]]]


!!! Nodes can emit packets

The next big feature is that nodes should be able to send and receive packets, and links to transmit them.

[[[language=smalltalk
KANetworkTest >> testSendAndTransmit
	| srcNode destNode link packet |
	srcNode := KANetworkNode withAddress: #src.
	destNode := KANetworkNode withAddress: #dest.
	link := (KANetworkLink from: srcNode to: destNode) attach; yourself.
	packet := KANetworkPacket from: #address to: #dest payload: #payload.

	srcNode send: packet via: link.
	self assert: (link isTransmitting: packet).
	self deny: (destNode hasReceived: packet).

	link transmit: packet.
	self deny: (link isTransmitting: packet).
	self assert: (destNode hasReceived: packet)
]]]

We create and setup two nodes, a link between them, and a packet.
Now, to control which packets get delivered in which order, we specify that it happens in separate, controlled steps.
This will allow us to model packet delivery precisely, to simulate latency, out-of-order reception, etc.:

- First, we tell the node to send the packet using ==send:via:==. At that point the packet should be passed to the link for transmission, but not completely delivered yet.
- Then, we tell the link to actually pass the packet along using ==transmit:==, and thus the packet should be received by the destination node.

!!!! Sending

To send a packet, the node emits it on the link:

[[[language=smalltalk
KANetworkNode >> send: aPacket via: aLink
	aLink emit: aPacket
]]]

Since the packet will not be delivered right away, emitting a packet really just stores it in the link, until the user elects this packet to proceed using the ==transmit:== message.
Storing packets requires adding an instance variable to ==KANetworkLink==, as well as specifying how this instance variable should be initialized.

[[[language=smalltalk
Object subclass: #KANetworkLink
	instanceVariableNames: 'source destination packetsToTransmit'
	classVariableNames: ''
	category: 'Kata-NetworkSimulator-Core'
]]]

[[[language=smalltalk
KANetworkLink >> initialize
	packetsToTransmit := OrderedCollection new
]]]

[[[language=smalltalk
KANetworkLink >> emit: aPacket
	packetsToTransmit add: aPacket
]]]

We also add a testing method to check whether a given packet is currently being transmitted by a link:

[[[language=smalltalk
KANetworkLink >> isTransmitting: aPacket
	^ packetsToTransmit includes: aPacket
]]]

!!!! Transmitting

Transmitting a packet means passing it to the destination node, which will receive it.
A link can not transmit packets that have not been sent via it, and once transmitted, the packet leaves the link:

[[[language=smalltalk
KANetworkLink >> transmit: aPacket
	(self isTransmitting: aPacket)
		ifTrue: [
			packetsToTransmit remove: aPacket.
			destination receive: aPacket from: self ]
]]]

Nodes only consume packets addressed to them; this is what will happen in our test, so we can worry about the alternative case later.

[[[language=smalltalk
KANetworkNode >> receive: aPacket from: aLink
	aPacket destinationAddress = address
		ifTrue: [ self consume: aPacket ]
		ifFalse: [ self notYetImplemented ]
]]]

Consuming a packet represents what the node will do with it; for general simulations, we only need to remember which packets did arrive:

[[[language=smalltalk
Object subclass: #KANetworkNode
	instanceVariableNames: 'address outgoingLinks arrivedPackets'
	classVariableNames: ''
	category: 'Kata-NetworkSimulator-Core'
]]]

[[[language=smalltalk
KANetworkNode >> initialize
	outgoingLinks := Set new.
	arrivedPackets := OrderedCollection new
]]]

[[[language=smalltalk
KANetworkNode >> consume: aPacket
	arrivedPackets add: aPacket
]]]

[[[language=smalltalk
KANetworkNode >> hasReceived: aPacket
	^ arrivedPackets includes: aPacket
]]]


!!! A standalone node can transmit a packet to itself

If a node wants to send a packet to itself, it does not need any connection to do so.
In real-world networking stacks, loopback routing shortcuts the lower networking layers; however, this is finer detail than we are modeling here.
Still, we want to model the fact that the loopback link is a little special, so each node will store its own loopback link, separately from the outgoing links.

[[[language=smalltalk
KANetworkTest >> testLoopback
	| node packet |
	node := KANetworkNode withAddress: #address.
	packet := KANetworkPacket from: #address to: #address payload: #payload.
	
	node send: packet.
	node loopback transmit: packet.
	
	self assert: (node hasReceived: packet).
	self deny: (node loopback isTransmitting: packet) 
]]]

The loopback link is implicitely created as part of the node itself.
We also introduce a new ==send:== message, which takes the responsibility of selecting the link to emit the packet.
For triggering packet transmission, we have to use a specific accessor to find the loopback link of the node.

First, we have to add yet another instance variable in nodes:

[[[language=smalltalk
Object subclass: #KANetworkNode
	instanceVariableNames: 'address outgoingLinks loopback arrivedPackets'
	classVariableNames: ''
	category: 'Kata-NetworkSimulator-Core'
]]]

As with all instance variables, we have to remember to make sure it is correctly initialized; we thus modify ==initialize==:

[[[language=smalltalk
KANetworkNode >> initialize
	loopback := KANetworkLink from: self to: self.
	outgoingLinks := Set new.
	arrivedPackets := OrderedCollection new
]]]

The accessor has nothing special:

[[[language=smalltalk
KANetworkNode >> loopback
	^ loopback
]]]

And finally we can focus on the ==send:== method and automatic link selection.
This method has to rely on some routing algorithm to identify which links will transmit the packet closer to its destination.
Since some routing algorithms select more than one link, we will implement routing as an ''iteration'' method, which evaluates the given block for each selected link.

[[[language=smalltalk
KANetworkNode >> send: aPacket
	self
		linksTowards: aPacket destinationAddress
		do: [ :link | self send: aPacket via: link ]
]]]

One of the simplest routing algorithm is flooding: just send the packet via every link; this is obviously a waste of bandwidth, but it works.
We can however make a special case for loopback, when the destination address is the one of the current node:

[[[language=smalltalk
linksTowards: anAddress do: aBlock
	anAddress = address
		ifTrue: [ aBlock value: self loopback ]
		ifFalse: [ outgoingLinks do: aBlock ]
]]]
